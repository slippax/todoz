{"version":3,"sources":["components/views/views.module.css","components/items/TodoItem.module.css","components/items/TodoItemList.module.css","components/items/TodoItemListCompleted.module.css","components/views/TitleMenu/TitleMenu.module.css","actions/index.js","components/items/TodoItem.js","components/items/TodoItemList.js","components/items/TodoItemListCompleted.js","components/views/TitleMenu/TitleMenu.js","components/views/views.js","App.js","serviceWorker.js","reducers/todo.js","reducers/index.js","index.js"],"names":["module","exports","nextTodoId","TodoItem","dispatch","useDispatch","itemAddHandler","item","type","id","payload","todoItem","className","classes","form","onSubmit","e","preventDefault","target","reset","textArea","TextField","variant","onChange","value","todoButton","Button","color","TodoItemList","newData","useSelector","state","todos","filter","i","completed","itemList","map","d","onClick","key","spy","list","TodoItemListCompleted","changedData","TitleMenu","titleText","views","theme","createMuiTheme","typography","button","fontFamily","pageWrapper","top","goWrapper","goText","completedWrapper","completedText","App","Boolean","window","location","hostname","match","todoReducer","action","allReducers","combineReducers","store","createStore","allReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97d30250.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"views_pageWrapper__1o1b-\",\"goWrapper\":\"views_goWrapper__3hgNM\",\"goText\":\"views_goText__3nIJV\",\"completedWrapper\":\"views_completedWrapper__2YSbp\",\"completedText\":\"views_completedText__1fUJv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoButton\":\"TodoItem_todoButton__2ZIsq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TodoItemList_list__31Abh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TodoItemListCompleted_list__1le2D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleText\":\"TitleMenu_titleText__1hEvy\"};","export const increment = (nr) => {\n  return {\n    type: \"INCREMENT\",\n    payload: nr,\n  };\n};\n\nexport const decrement = () => {\n  return {\n    type: \"DECREMENT\",\n  };\n};\n\nexport const todo = (name) => {\n  return {\n    type: \"TODO\",\n    payload: name,\n  };\n};\nlet nextTodoId = 0;\nexport const addTodo = (name) => {\n  return {\n    type: \"ADD_TODO\",\n    id: nextTodoId++,\n    payload: name,\n  };\n};\n\nexport const deleteTodo = (name) => {\n  return {\n    type: \"DELETE_TODO\",\n    payload: name,\n  };\n};\n\nexport const completedTodo = (id) => {\n  return {\n    type: \"COMPLETED_TODO\",\n    id\n  };\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodo } from \"../../actions\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from '@material-ui/core/Button';\nimport classes from \"./TodoItem.module.css\";\nconst TodoItem = () => {\n  const dispatch = useDispatch();\n\n  const itemAddHandler = (item) => {\n    dispatch(addTodo(item));\n  };\n  let todoItem = [];\n  return (\n    <div className={classes.form}>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          itemAddHandler(todoItem);\n          e.target.reset();\n        }}\n      >\n        <div className={classes.textArea}>\n        <TextField\n          variant=\"outlined\"\n          onChange={(e) => {\n            todoItem = e.target.value;\n          }}\n          \n        />\n        </div>\n        <div className={classes.todoButton}>\n        <Button variant=\"contained\" color=\"default\" type=\"submit\">Add Todo</Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { completedTodo } from \"../../actions\";\nimport { useDispatch } from \"react-redux\";\nimport classes from \"./TodoItemList.module.css\";\nimport HeadShake from \"react-reveal/HeadShake\";\n\nconst TodoItemList = () => {\n  const dispatch = useDispatch();\n  const data = useSelector((state) => state.todos);\n  const newData = data.filter((i) => i.completed === false);\n  const itemList = newData.map((d) => (\n    <li onClick={() => dispatch(completedTodo(d.id))} key={d.id}>\n      {d.item}\n    </li>\n  ));\n  return (\n    <div>\n      <HeadShake spy={newData}>\n        <div className={classes.list}>\n          <ul>{itemList}</ul>\n        </div>\n      </HeadShake>\n    </div>\n  );\n};\n\nexport default TodoItemList;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { deleteTodo } from \"../../actions\";\nimport { useDispatch } from \"react-redux\";\nimport classes from \"./TodoItemListCompleted.module.css\";\nimport HeadShake from \"react-reveal/HeadShake\";\n\nconst TodoItemListCompleted = () => {\n  const dispatch = useDispatch();\n  const data = useSelector((state) => state.todos);\n  const changedData = data.filter((i) => i.completed === true);\n  const itemList = changedData.map((d) => <li onClick={() => dispatch(deleteTodo(d.id))} key={d.id}>{d.item}</li>);\n  return (\n    <div>\n      <HeadShake spy={changedData}>\n        <div className={classes.list}>\n          <ul>{itemList}</ul>\n        </div>\n      </HeadShake>\n    </div>\n  );\n};\n\nexport default TodoItemListCompleted;\n","import React from 'react'\nimport classes from './TitleMenu.module.css'\nconst TitleMenu = () => {\n    return (\n        <div className={classes.titleText}>\n            <h1>Todoz</h1>\n        </div>\n    )\n}\n\nexport default TitleMenu","import React from \"react\";\nimport TodoItem from \"../items/TodoItem\";\nimport TodoItemList from \"../items/TodoItemList\";\nimport TodoItemListCompleted from '../items/TodoItemListCompleted';\nimport TitleMenu from \"./TitleMenu/TitleMenu\";\nimport classes from \"./views.module.css\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport Bounce from \"react-reveal/Flip\";\nconst views = () => {\n  const theme = createMuiTheme({\n    typography: {\n      button: {\n        fontFamily: \"Permanent Marker\",\n      },\n    },\n  });\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className={classes.pageWrapper}>\n        <Bounce top>\n          <TitleMenu />\n          <TodoItem />\n          <div className={classes.goWrapper}>\n            <h3 className={classes.goText}>ON THE GO</h3>\n            <TodoItemList/>\n          </div>\n          <div className={classes.completedWrapper}>\n          <h3 className={classes.completedText}>COMPLETED</h3>\n          <TodoItemListCompleted/>\n          </div>\n        </Bounce>\n      </div>\n    </MuiThemeProvider>\n  );\n};\n\nexport default views;\n","import React from \"react\";\nimport View from \"./components/views/views\";\nfunction App() {\n  return (\n    <div>\n      <View />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const todoReducer = (state = [], action) => {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      return [\n        ...state,\n        {\n          id: action.id,\n          item: action.payload,\n          completed: false,\n        },\n      ];\n    case \"DELETE_TODO\":\n      return state.filter(({ id }) => id !== action.payload);\n\n    case \"COMPLETED_TODO\":\n      return state.map((item) =>\n        item.id === action.id ? { ...item, completed: !item.completed } : item\n      );\n\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","import { combineReducers } from \"redux\";\nimport todoReducer from \"./todo\";\nconst allReducers = combineReducers({\n  todos: todoReducer,\n});\n\nexport default allReducers;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport allReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\nconst store = createStore(\n  allReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}